#! /usr/bin/python3

from std_msgs.msg import Bool
import rclpy
from rclpy.node import Node
import signal
import os, sys
from utils.heartbeat_helper import HeartbeatHelper
import RPi.GPIO as GPIO
from time import sleep


class ResetThrustersNode(Node):
    def __init__(self):
        super().__init__('reset_thrusters_node')

        # Setup heartbeat
        self.heartbeat_helper = HeartbeatHelper(self)
        
        # Initalize subscriber
        self.create_subscription(Bool, 'reset_thrusters', self.reset_thrusters, 10)

        self.get_logger().info("Reset started")


    def reset_thrusters(self, msg):
        self.get_logger().info(f'Received thruster reset command: {msg.data}')
        GPIO.output(5, GPIO.LOW)
        # GPIO.output(6, GPIO.LOW)
        # GPIO.output(21, GPIO.LOW)
        sleep(1)
        GPIO.output(5, GPIO.HIGH)
        # GPIO.output(6, GPIO.HIGH)
        # GPIO.output(21, GPIO.HIGH)





def main():
    rclpy.init()
    reset_thrusters_node = ResetThrustersNode()
    
    # Silent exit on SIGINT - just terminate immediately
    def silent_exit(sig, frame):
        os._exit(0)  # exit immediately without cleanup
    
    # Register the signal handler
    signal.signal(signal.SIGINT, silent_exit)
    signal.signal(signal.SIGTERM, silent_exit)

    GPIO.setwarnings(False)
    GPIO.setmode(GPIO.BCM)
    GPIO.setup(5, GPIO.OUT, initial=GPIO.LOW)
    # GPIO.setup(6, GPIO.OUT, initial=GPIO.HIGH)
    # GPIO.setup(21, GPIO.OUT, initial=GPIO.HIGH)
    GPIO.output(5, GPIO.HIGH)
    
    try:
        rclpy.spin(reset_thrusters_node)
    except KeyboardInterrupt:
        # Exit silently on KeyboardInterrupt too
        os._exit(0)
    finally:
        # This will only run if spin() returns normally (which it shouldnt), not after os._exit()
        sys.exit(0)


if __name__ == '__main__':
    main()